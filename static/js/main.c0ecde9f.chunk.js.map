{"version":3,"sources":["Board/Board.js","MetaBoard/MetaBoard.js","InfoDis/InfoDis.js","App/App.js","reportWebVitals.js","index.js"],"names":["Board","props","handleClick","bind","updateValidBoards","updateBoardState","checkLocalWinner","checkForWinner","getBoardAndTileNumber","renderBoard","state","boardState","Array","fill","tile","currentPlayer","currentBoard","this","splice","setState","board","winner","console","log","boardNumber","addLocalWinner","xIsNext","tileNumber","handleTurnUpdate","e","target","isWinner","nextBoard","includes","backgroundColor","style","tileCode","parseInt","id","toString","length","nineSquare","x","key","push","className","onClick","React","Component","MetaBoard","metaBoard","gameState","nextPlayBoard","InfoDis","message","player","toUpperCase","palettes","background","player1","player2","text","App","togglePlayer","updateGameState","changeBoardColor","checkForGameWinner","defineNextBoard","resetGame","boards","document","getElementsByClassName","tiles","body","getElementsByTagName","localWinner","Number","nextColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4VAGaA,EAAb,kDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBACzB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBACxB,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,gBACxB,EAAKI,eAAiB,EAAKA,eAAeJ,KAApB,gBACtB,EAAKK,sBAAwB,EAAKA,sBAAsBL,KAA3B,gBAC7B,EAAKM,YAAc,EAAKA,YAAYN,KAAjB,gBACnB,EAAKO,MAAQ,CAAGC,WAAYC,MAAM,GAAGC,KAAK,OAT3B,EADvB,oDAcI,SAAiBC,EAAMC,GACnB,IAAIC,EAAeC,KAAKP,MAAMC,WAC9BK,EAAaE,OAAOJ,EAAM,EAAGC,GAC7BE,KAAKE,SAAS,CAAER,WAAYK,MAjBpC,8BAoBI,WACI,IAAII,EAAQH,KAAKP,MAAMC,WACnBU,EAASJ,KAAKV,eAAea,GAC7BC,IACAC,QAAQC,IAAI,qBAAsBN,KAAKhB,MAAMuB,YAAaH,GAE1DJ,KAAKhB,MAAMwB,eAAeR,KAAKhB,MAAMuB,YAAaH,MA1B9D,4BAgCI,SAAeD,GACX,OAAKA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAkB,MAAZA,EAAM,IACxDA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAkB,MAAZA,EAAM,IACxDA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAkB,MAAZA,EAAM,IACxDA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAkB,MAAZA,EAAM,IACxDA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAkB,MAAZA,EAAM,IACxDA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAkB,MAAZA,EAAM,IACxDA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAkB,MAAZA,EAAM,IACxDA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAkB,MAAZA,EAAM,MAC3CH,KAAKhB,MAAMyB,QAAW,MAAQ,UAzCxD,+BAgDI,SAAkBC,EAAYH,EAAaH,GACvCJ,KAAKhB,MAAM2B,iBAAiBD,EAAYH,EAAaH,KAjD7D,yBAoDI,SAAYQ,GACR,IAAIf,EAAOe,EAAEC,OADF,EAEuBb,KAAKT,sBAAsBM,GAFlD,mBAELU,EAFK,KAEQG,EAFR,KAGX,IAAMV,KAAKhB,MAAM8B,UAAkD,MAArCd,KAAKP,MAAMC,WAAWgB,IAAuBV,KAAKhB,MAAM+B,UAAUC,SAAST,GAAc,CACnH,IAAIT,EAAiBE,KAAKhB,MAAMyB,QAAW,MAAQ,OAC/CQ,EAAqC,QAAlBnB,EAA2B,UAAY,UAC9DD,EAAKqB,MAAMD,gBAAkBA,EAC7BjB,KAAKZ,iBAAiBsB,EAAYZ,GAClC,IAAIM,EAASJ,KAAKV,eAAeU,KAAKP,MAAMC,YAC5CM,KAAKb,kBAAkBuB,EAAYH,EAAaH,MA7D5D,mCAiEI,SAAsBP,GAClB,IACIU,EAAaG,EADbS,EAAWC,SAASvB,EAAKwB,IAS7B,OAPmC,IAA/BF,EAASG,WAAWC,QACpBhB,EAAc,EACdG,EAAaS,GACyB,IAA/BA,EAASG,WAAWC,SAC3BhB,EAAca,SAASD,EAASG,WAAW,IAC3CZ,EAAaU,SAASD,EAASG,WAAW,KAEvC,CAACf,EAAaG,KA3E7B,yBA8EI,WAEI,IADA,IAAIc,EAAa,GACRC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAIC,EAAG,UAAM1B,KAAKhB,MAAMuB,aAAjB,OAA+BkB,EAA/B,QACPD,EAAWG,KAAK,qBAAKC,UAAU,OAAOP,GAAIK,EAAeG,QAAS7B,KAAKf,aAAnByC,IAExD,OAAOF,IApFf,oBAuFI,WACI,OACI,qBAAKI,UAAU,UAAf,SACI,qBAAKA,UAAU,QAAf,SACK5B,KAAKR,sBA3F1B,GAA2BsC,IAAMC,WCCpBC,EAAb,4JAEI,WAEI,IADA,IAAIC,EAAY,GACPR,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAIC,EAAG,UAAMD,EAAN,SACPQ,EAAUN,KAAK,cAAC,EAAD,CAAiBpB,YAAakB,EAAGS,UAAWlC,KAAKhB,MAAMkD,UAAWzB,QAAST,KAAKhB,MAAMyB,QAASnB,eAAgBU,KAAKhB,MAAMM,eAAgBwB,SAAUd,KAAKhB,MAAMoB,OAAQO,iBAAkBX,KAAKhB,MAAM2B,iBAAkBI,UAAWf,KAAKhB,MAAMmD,cAAe3B,eAAgBR,KAAKhB,MAAMwB,gBAA1QkB,IAG/B,OACQ,qBAAKE,UAAU,YAAf,SACKK,QAXrB,GAA+BH,IAAMC,WCDxBK,G,MAAb,4JAEI,WACI,IAAIC,EACJ,GAAIrC,KAAKhB,MAAMoB,OAAQ,CACnB,IAAIkC,EAAStC,KAAKhB,MAAMoB,OAAOmC,cAC/BF,EAAO,UAAMC,EAAN,iBACJ,CACH,IAAIA,EAAUtC,KAAKhB,MAAMyB,QAAW,MAAQ,OAC5C4B,EAAO,eAAWC,EAAX,YAGX,OACQ,4BAAID,QAbpB,GAA6BP,IAAMC,YCEtBS,EAAW,CAAC,CACvBC,WAAY,UACZC,QAAS,UACTC,QAAS,UACTC,KAAM,YAmHOC,E,kDA/Gb,WAAY7D,GAAQ,IAAD,8BACjB,cAAMA,IACD8D,aAAe,EAAKA,aAAa5D,KAAlB,gBACpB,EAAK6D,gBAAkB,EAAKA,gBAAgB7D,KAArB,gBACvB,EAAKD,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAK8D,iBAAmB,EAAKA,iBAAiB9D,KAAtB,gBACxB,EAAK+D,mBAAqB,EAAKA,mBAAmB/D,KAAxB,gBAC1B,EAAKgE,gBAAkB,EAAKA,gBAAgBhE,KAArB,gBACvB,EAAKiE,UAAY,EAAKA,UAAUjE,KAAf,gBACjB,EAAKO,MAAQ,CACXyC,UAAWvC,MAAM,GAAGC,KAAK,MACzBa,SAAS,EACT0B,cAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACxC/B,OAAQ,MAbO,E,6CAiBnB,WACEJ,KAAKE,SAAS,CAAEgC,UAAWvC,MAAM,GAAGC,KAAK,MACvCa,SAAS,EACT0B,cAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACxC/B,OAAQ,OACR,IALQ,EAKJgD,EAASC,SAASC,uBAAuB,SACzCC,EAAQF,SAASC,uBAAuB,QACxCE,EAAOH,SAASI,qBAAqB,QAAQ,GAPzC,cAQUL,GARV,IAQR,oCAAgClC,MAAMuB,WAAaD,EAAS,GAAGE,SARvD,kDASSa,GATT,IASR,oCAA6BrC,MAAMuB,WAAaD,EAAS,GAAGC,YATpD,8BAURe,EAAKtC,MAAMuB,WAAaD,EAAS,GAAGC,a,gCAIxC,WACE,IAAItC,EAAQH,KAAKP,MAAMyC,UACvB,GAAK/B,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAkB,MAAZA,EAAM,IACxDA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAkB,MAAZA,EAAM,IACxDA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAkB,MAAZA,EAAM,IACxDA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAkB,MAAZA,EAAM,IACxDA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAkB,MAAZA,EAAM,IACxDA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAkB,MAAZA,EAAM,IACxDA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAkB,MAAZA,EAAM,IACxDA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAkB,MAAZA,EAAM,GAAa,CACtE,IAAIC,EAAUJ,KAAKP,MAAMgB,QAAW,UAAY,UAGhD,OAFAT,KAAKE,SAAS,CAAEE,OAAQA,IACxBiD,SAASI,qBAAqB,QAAQ,GAAGvC,MAAMuB,WAAaD,EAAS,GAAGpC,OACjEA,EAEP,OAAO,I,6BAOb,SAAgBD,EAAOuD,GACrB,IAAIxB,EAAYlC,KAAKP,MAAMyC,UAE3B,OADIwB,GAAaxB,EAAUjC,OAAOE,EAAO,EAAGuD,GACrCxB,I,6BAGT,SAAgB3B,GACdF,QAAQC,IAAI,gBAAiBC,GAC7B,IAAIQ,EAAY,GAChB,GAAyC,MAArCf,KAAKP,MAAMyC,UAAU3B,GAAsBQ,EAAUY,KAAKpB,QAE5D,IAAK,IAAIkB,KAAKzB,KAAKP,MAAMyC,UACQ,MAA3BlC,KAAKP,MAAMyC,UAAUT,IAAYV,EAAUY,KAAKgC,OAAOlC,IAI/D,OADAzB,KAAKgD,iBAAiBjC,GACfA,I,8BAGT,SAAiBA,GAGf,IAFA,IAAIqC,EAASC,SAASC,uBAAuB,SACzCM,EAAa5D,KAAKP,MAAMgB,QAAW,UAAY,UAC1CgB,EAAG,EAAGA,EAAI,EAAGA,IACdV,EAAUC,SAASS,GAAI2B,EAAO3B,GAAGP,MAAMuB,WAAamB,EACnDR,EAAO3B,GAAGP,MAAMuB,WAAa,Y,0BAIxC,WAEE,OADezC,KAAKP,MAAMgB,U,yBAI5B,SAAYC,EAAYH,EAAaH,GACnCJ,KAAKE,SAAS,CAAEgC,UAAWlC,KAAK+C,gBAAgBxC,EAAaH,GAC7C+B,cAAenC,KAAKkD,gBAAgBxC,GACpCD,QAAST,KAAK8C,iBAC9B9C,KAAKiD,uB,oBAKP,WACE,OACE,gCACE,+CACA,sBAAK5B,GAAG,YAAR,UACE,cAAC,EAAD,CAASZ,QAAST,KAAKP,MAAMgB,QAASL,OAAQJ,KAAKP,MAAMW,OAAQ+C,UAAWnD,KAAKmD,YACjF,cAAC,EAAD,CAAWjB,UAAWlC,KAAKP,MAAMyC,UAAW5C,eAAgBU,KAAKV,eAAgBmB,QAAST,KAAKP,MAAMgB,QAASE,iBAAkBX,KAAKf,YAAakD,cAAenC,KAAKP,MAAM0C,cAAerB,SAAUd,KAAKP,MAAMW,OAAQI,eAAgBR,KAAKQ,oBAE/O,wBAAQqB,QAAS7B,KAAKmD,UAAtB,0B,GAxGUrB,IAAMC,WCAT8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnB,SAASoB,eAAe,SAM1BZ,M","file":"static/js/main.c0ecde9f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Board.css';\r\n\r\nexport class Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.updateValidBoards = this.updateValidBoards.bind(this);\r\n        this.updateBoardState = this.updateBoardState.bind(this);\r\n        this.checkLocalWinner = this.checkLocalWinner.bind(this);\r\n        this.checkForWinner = this.checkForWinner.bind(this);\r\n        this.getBoardAndTileNumber = this.getBoardAndTileNumber.bind(this);\r\n        this.renderBoard = this.renderBoard.bind(this);\r\n        this.state = {  boardState: Array(9).fill(null),\r\n                        /*localWinner: null*/ }\r\n    }\r\n\r\n    updateBoardState(tile, currentPlayer) {\r\n        let currentBoard = this.state.boardState;\r\n        currentBoard.splice(tile, 1, currentPlayer);\r\n        this.setState({ boardState: currentBoard });\r\n    } \r\n\r\n    checkLocalWinner() {\r\n        let board = this.state.boardState;\r\n        let winner = this.checkForWinner(board);\r\n        if (winner) {\r\n            console.log(\"There's a winner! \", this.props.boardNumber, winner);\r\n            //this.setState({ localWinner : winner });\r\n            this.props.addLocalWinner(this.props.boardNumber, winner);\r\n            \r\n            //document.getElementsByClassName('Overlay')[this.props.boardNumber].style.backgroundColor = winner;\r\n        }\r\n    }\r\n\r\n    checkForWinner(board) {\r\n        if ((board[0] === board[1] && board[0] === board[2] && board[0] != null) || \r\n            (board[0] === board[3] && board[0] === board[6] && board[0] != null) ||\r\n            (board[0] === board[4] && board[0] === board[8] && board[0] != null) ||\r\n            (board[1] === board[4] && board[1] === board[7] && board[1] != null) ||\r\n            (board[2] === board[5] && board[2] === board[8] && board[2] != null) ||\r\n            (board[3] === board[4] && board[4] === board[5] && board[3] != null) ||\r\n            (board[6] === board[7] && board[6] === board[8] && board[6] != null) ||\r\n            (board[2] === board[4] && board[2] === board[6] && board[2] != null)) {\r\n            let winner = (this.props.xIsNext) ? 'red' : 'blue';\r\n            return winner;\r\n        } else {\r\n            return false;\r\n        }   \r\n      }\r\n    \r\n    updateValidBoards(tileNumber, boardNumber, winner) {\r\n        this.props.handleTurnUpdate(tileNumber, boardNumber, winner);\r\n    }\r\n\r\n    handleClick(e) {\r\n        let tile = e.target;\r\n        let [ boardNumber, tileNumber ] = this.getBoardAndTileNumber(tile); \r\n        if ((!this.props.isWinner) && this.state.boardState[tileNumber] == null && this.props.nextBoard.includes(boardNumber)) {\r\n            let currentPlayer = (this.props.xIsNext) ? \"red\" : \"blue\";\r\n            let backgroundColor = (currentPlayer === \"red\") ? '#f30067' : '#00d1cd'\r\n            tile.style.backgroundColor = backgroundColor;    \r\n            this.updateBoardState(tileNumber, currentPlayer);\r\n            let winner = this.checkForWinner(this.state.boardState);   \r\n            this.updateValidBoards(tileNumber, boardNumber, winner);\r\n        }       \r\n    }\r\n\r\n    getBoardAndTileNumber(tile) {\r\n        let tileCode = parseInt(tile.id);\r\n        let boardNumber, tileNumber;\r\n        if (tileCode.toString().length === 1) {\r\n            boardNumber = 0;\r\n            tileNumber = tileCode;\r\n        } else if (tileCode.toString().length === 2) {\r\n            boardNumber = parseInt(tileCode.toString()[0]);\r\n            tileNumber = parseInt(tileCode.toString()[1]);\r\n        }\r\n        return [boardNumber, tileNumber];\r\n    }\r\n\r\n    renderBoard() {\r\n        let nineSquare = [];\r\n        for (let x = 0; x < 9; x++) {\r\n            let key = `${this.props.boardNumber}${x}tile`;\r\n            nineSquare.push(<div className=\"tile\" id={key} key={key} onClick={this.handleClick} />);\r\n        }\r\n        return nineSquare;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Overlay\">\r\n                <div className=\"Board\"  >\r\n                    {this.renderBoard()}\r\n                </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './MetaBoard.css';\r\nimport { Board } from '../Board/Board';\r\n\r\nexport class MetaBoard extends React.Component {\r\n    \r\n    render() {\r\n        let metaBoard = [];\r\n        for (let x = 0; x < 9; x++) {\r\n            let key = `${x}board`;\r\n            metaBoard.push(<Board key={key} boardNumber={x} gameState={this.props.gameState} xIsNext={this.props.xIsNext} checkForWinner={this.props.checkForWinner} isWinner={this.props.winner} handleTurnUpdate={this.props.handleTurnUpdate} nextBoard={this.props.nextPlayBoard} addLocalWinner={this.props.addLocalWinner} />);\r\n        }\r\n\r\n        return (\r\n                <div className=\"metaBoard\">\r\n                    {metaBoard}\r\n                </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './InfoDis.css';\r\n\r\nexport class InfoDis extends React.Component {\r\n\r\n    render() {\r\n        let message;\r\n        if (this.props.winner) {\r\n            let player = this.props.winner.toUpperCase();\r\n            message = `${player} has won!`;\r\n        } else {\r\n            let player = (this.props.xIsNext) ? 'RED' : 'BLUE';\r\n            message = `It's ${player}'s turn!`;\r\n        }\r\n        \r\n        return (\r\n                <p>{message}</p>      \r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { MetaBoard } from '../MetaBoard/MetaBoard.js';\nimport { InfoDis } from '../InfoDis/InfoDis';\n\nexport const palettes = [{\n  background: '#444444',\n  player1: '#f30067',\n  player2: '#00d1cd',\n  text: '#eaeaea'\n}];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.togglePlayer = this.togglePlayer.bind(this);\n    this.updateGameState = this.updateGameState.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.changeBoardColor = this.changeBoardColor.bind(this);\n    this.checkForGameWinner = this.checkForGameWinner.bind(this);\n    this.defineNextBoard = this.defineNextBoard.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n    this.state = {\n      gameState: Array(9).fill(null),\n      xIsNext: true,\n      nextPlayBoard: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n      winner: null\n    };\n  }\n\n  resetGame() {\n    this.setState({ gameState: Array(9).fill(null),\n      xIsNext: true,\n      nextPlayBoard: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n      winner: null });\n      let boards = document.getElementsByClassName('Board');\n      let tiles = document.getElementsByClassName('tile');\n      let body = document.getElementsByTagName('body')[0];\n      for (let board of boards) board.style.background = palettes[0].player1;\n      for (let tile of tiles) tile.style.background = palettes[0].background;\n      body.style.background = palettes[0].background;\n  }\n\n  \n  checkForGameWinner() {\n    let board = this.state.gameState;\n    if ((board[0] === board[1] && board[0] === board[2] && board[0] != null) || \n        (board[0] === board[3] && board[0] === board[6] && board[0] != null) ||\n        (board[0] === board[4] && board[0] === board[8] && board[0] != null) ||\n        (board[1] === board[4] && board[1] === board[7] && board[1] != null) ||\n        (board[2] === board[5] && board[2] === board[8] && board[2] != null) ||\n        (board[3] === board[4] && board[4] === board[5] && board[3] != null) ||\n        (board[6] === board[7] && board[6] === board[8] && board[6] != null) ||\n        (board[2] === board[4] && board[2] === board[6] && board[2] != null)) {\n        let winner = (this.state.xIsNext) ? 'player1' : 'player2';\n        this.setState({ winner: winner });\n        document.getElementsByTagName('body')[0].style.background = palettes[0].winner;\n        return winner;\n    } else {\n        return false;\n    }   \n  }\n  \n\n  \n\n  updateGameState(board, localWinner) {\n    let gameState = this.state.gameState;\n    if (localWinner) gameState.splice(board, 1, localWinner);\n    return gameState;\n  }\n\n  defineNextBoard(boardNumber) {\n    console.log(\"boardNumber: \", boardNumber);\n    let nextBoard = [];\n    if (this.state.gameState[boardNumber] == null) nextBoard.push(boardNumber);\n    else {\n      for (let x in this.state.gameState) {\n        if (this.state.gameState[x] == null) nextBoard.push(Number(x));\n      }\n    } \n    this.changeBoardColor(nextBoard);\n    return nextBoard;\n  }\n\n  changeBoardColor(nextBoard) {\n    let boards = document.getElementsByClassName('Board');\n    let nextColor = (this.state.xIsNext) ? \"#00d1cd\" : \"#f30067\";\n    for (let x =0; x < 9; x++) {   \n        if (nextBoard.includes(x)) boards[x].style.background = nextColor; \n        else boards[x].style.background = \"#d8c292\";\n    }    \n }\n\n  togglePlayer() {\n    let xIsNext = (this.state.xIsNext) ? false : true;\n    return xIsNext;\n  }\n\n  handleClick(tileNumber, boardNumber, winner) {\n    this.setState({ gameState: this.updateGameState(boardNumber, winner), \n                    nextPlayBoard: this.defineNextBoard(tileNumber),\n                    xIsNext: this.togglePlayer()});\n    this.checkForGameWinner();\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <h1>MetaTicTacToe</h1>\n        <div id=\"gameSpace\">\n          <InfoDis xIsNext={this.state.xIsNext} winner={this.state.winner} resetGame={this.resetGame} />\n          <MetaBoard gameState={this.state.gameState} checkForWinner={this.checkForWinner} xIsNext={this.state.xIsNext} handleTurnUpdate={this.handleClick} nextPlayBoard={this.state.nextPlayBoard} isWinner={this.state.winner} addLocalWinner={this.addLocalWinner} />\n        </div>\n        <button onClick={this.resetGame}>Reset</button>\n      </div>\n    );     \n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}